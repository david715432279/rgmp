/* Auto-generated by genmsg_cpp for file /home/user/fuerte_workspace/rgmp_node/rgmp/msg/Pos.msg */
#ifndef RGMP_MESSAGE_POS_H
#define RGMP_MESSAGE_POS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace rgmp
{
template <class ContainerAllocator>
struct Pos_ {
  typedef Pos_<ContainerAllocator> Type;

  Pos_()
  : joint1(0.0)
  , joint2(0.0)
  , joint3(0.0)
  , joint4(0.0)
  , joint5(0.0)
  , joint6(0.0)
  {
  }

  Pos_(const ContainerAllocator& _alloc)
  : joint1(0.0)
  , joint2(0.0)
  , joint3(0.0)
  , joint4(0.0)
  , joint5(0.0)
  , joint6(0.0)
  {
  }

  typedef float _joint1_type;
  float joint1;

  typedef float _joint2_type;
  float joint2;

  typedef float _joint3_type;
  float joint3;

  typedef float _joint4_type;
  float joint4;

  typedef float _joint5_type;
  float joint5;

  typedef float _joint6_type;
  float joint6;


  typedef boost::shared_ptr< ::rgmp::Pos_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rgmp::Pos_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Pos
typedef  ::rgmp::Pos_<std::allocator<void> > Pos;

typedef boost::shared_ptr< ::rgmp::Pos> PosPtr;
typedef boost::shared_ptr< ::rgmp::Pos const> PosConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::rgmp::Pos_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::rgmp::Pos_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace rgmp

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::rgmp::Pos_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::rgmp::Pos_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::rgmp::Pos_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b0068422b386ec8608fa05052ffe139f";
  }

  static const char* value(const  ::rgmp::Pos_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xb0068422b386ec86ULL;
  static const uint64_t static_value2 = 0x08fa05052ffe139fULL;
};

template<class ContainerAllocator>
struct DataType< ::rgmp::Pos_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rgmp/Pos";
  }

  static const char* value(const  ::rgmp::Pos_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::rgmp::Pos_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32 joint1\n\
float32 joint2\n\
float32 joint3\n\
float32 joint4\n\
float32 joint5\n\
float32 joint6\n\
\n\
\n\
";
  }

  static const char* value(const  ::rgmp::Pos_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::rgmp::Pos_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::rgmp::Pos_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.joint1);
    stream.next(m.joint2);
    stream.next(m.joint3);
    stream.next(m.joint4);
    stream.next(m.joint5);
    stream.next(m.joint6);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Pos_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rgmp::Pos_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::rgmp::Pos_<ContainerAllocator> & v) 
  {
    s << indent << "joint1: ";
    Printer<float>::stream(s, indent + "  ", v.joint1);
    s << indent << "joint2: ";
    Printer<float>::stream(s, indent + "  ", v.joint2);
    s << indent << "joint3: ";
    Printer<float>::stream(s, indent + "  ", v.joint3);
    s << indent << "joint4: ";
    Printer<float>::stream(s, indent + "  ", v.joint4);
    s << indent << "joint5: ";
    Printer<float>::stream(s, indent + "  ", v.joint5);
    s << indent << "joint6: ";
    Printer<float>::stream(s, indent + "  ", v.joint6);
  }
};


} // namespace message_operations
} // namespace ros

#endif // RGMP_MESSAGE_POS_H

